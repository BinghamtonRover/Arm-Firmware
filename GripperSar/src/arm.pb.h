/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_ARM_PB_H_INCLUDED
#define PB_ARM_PB_H_INCLUDED
#include "utils/src/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* TODO: Use a Position and Motors */
typedef struct _Position {
    int32_t x;
    int32_t y;
    int32_t z;
} Position;

typedef struct _MotorStatus {
    bool is_moving;
    float angle;
    float temperature;
} MotorStatus;

typedef struct _ArmData {
    bool has_currentPosition;
    Position currentPosition;
    bool has_targetPosition;
    Position targetPosition;
    bool has_base;
    MotorStatus base;
    bool has_shoulder;
    MotorStatus shoulder;
    bool has_elbow;
    MotorStatus elbow;
} ArmData;

/* TODO: Precise motion and IK */
typedef struct _ArmCommand {
    bool stop;
    bool calibrate;
    float move_swivel;
    float move_shoulder;
    float move_elbow;
} ArmCommand;

typedef struct _GripperData {
    bool has_rotate;
    MotorStatus rotate;
    bool has_lift;
    MotorStatus lift;
    bool has_pinch;
    MotorStatus pinch;
} GripperData;

/* TODO: Precise motion */
typedef struct _GripperCommand {
    bool stop;
    bool calibrate;
    float move_rotate;
    float move_lift;
    float move_gripper;
} GripperCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Position_init_default                    {0, 0, 0}
#define MotorStatus_init_default                 {0, 0, 0}
#define ArmData_init_default                     {false, Position_init_default, false, Position_init_default, false, MotorStatus_init_default, false, MotorStatus_init_default, false, MotorStatus_init_default}
#define ArmCommand_init_default                  {0, 0, 0, 0, 0}
#define GripperData_init_default                 {false, MotorStatus_init_default, false, MotorStatus_init_default, false, MotorStatus_init_default}
#define GripperCommand_init_default              {0, 0, 0, 0, 0}
#define Position_init_zero                       {0, 0, 0}
#define MotorStatus_init_zero                    {0, 0, 0}
#define ArmData_init_zero                        {false, Position_init_zero, false, Position_init_zero, false, MotorStatus_init_zero, false, MotorStatus_init_zero, false, MotorStatus_init_zero}
#define ArmCommand_init_zero                     {0, 0, 0, 0, 0}
#define GripperData_init_zero                    {false, MotorStatus_init_zero, false, MotorStatus_init_zero, false, MotorStatus_init_zero}
#define GripperCommand_init_zero                 {0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Position_x_tag                           1
#define Position_y_tag                           2
#define Position_z_tag                           3
#define MotorStatus_is_moving_tag                1
#define MotorStatus_angle_tag                    2
#define MotorStatus_temperature_tag              3
#define ArmData_currentPosition_tag              1
#define ArmData_targetPosition_tag               2
#define ArmData_base_tag                         3
#define ArmData_shoulder_tag                     4
#define ArmData_elbow_tag                        5
#define ArmCommand_stop_tag                      1
#define ArmCommand_calibrate_tag                 2
#define ArmCommand_move_swivel_tag               3
#define ArmCommand_move_shoulder_tag             4
#define ArmCommand_move_elbow_tag                5
#define GripperData_rotate_tag                   1
#define GripperData_lift_tag                     2
#define GripperData_pinch_tag                    3
#define GripperCommand_stop_tag                  1
#define GripperCommand_calibrate_tag             2
#define GripperCommand_move_rotate_tag           3
#define GripperCommand_move_lift_tag             4
#define GripperCommand_move_gripper_tag          5

/* Struct field encoding specification for nanopb */
#define Position_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    x,                 1) \
X(a, STATIC,   SINGULAR, INT32,    y,                 2) \
X(a, STATIC,   SINGULAR, INT32,    z,                 3)
#define Position_CALLBACK NULL
#define Position_DEFAULT NULL

#define MotorStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     is_moving,         1) \
X(a, STATIC,   SINGULAR, FLOAT,    angle,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       3)
#define MotorStatus_CALLBACK NULL
#define MotorStatus_DEFAULT NULL

#define ArmData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  currentPosition,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  targetPosition,    2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  base,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  shoulder,          4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  elbow,             5)
#define ArmData_CALLBACK NULL
#define ArmData_DEFAULT NULL
#define ArmData_currentPosition_MSGTYPE Position
#define ArmData_targetPosition_MSGTYPE Position
#define ArmData_base_MSGTYPE MotorStatus
#define ArmData_shoulder_MSGTYPE MotorStatus
#define ArmData_elbow_MSGTYPE MotorStatus

#define ArmCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     stop,              1) \
X(a, STATIC,   SINGULAR, BOOL,     calibrate,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    move_swivel,       3) \
X(a, STATIC,   SINGULAR, FLOAT,    move_shoulder,     4) \
X(a, STATIC,   SINGULAR, FLOAT,    move_elbow,        5)
#define ArmCommand_CALLBACK NULL
#define ArmCommand_DEFAULT NULL

#define GripperData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rotate,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  lift,              2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pinch,             3)
#define GripperData_CALLBACK NULL
#define GripperData_DEFAULT NULL
#define GripperData_rotate_MSGTYPE MotorStatus
#define GripperData_lift_MSGTYPE MotorStatus
#define GripperData_pinch_MSGTYPE MotorStatus

#define GripperCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     stop,              1) \
X(a, STATIC,   SINGULAR, BOOL,     calibrate,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    move_rotate,       3) \
X(a, STATIC,   SINGULAR, FLOAT,    move_lift,         4) \
X(a, STATIC,   SINGULAR, FLOAT,    move_gripper,      5)
#define GripperCommand_CALLBACK NULL
#define GripperCommand_DEFAULT NULL

extern const pb_msgdesc_t Position_msg;
extern const pb_msgdesc_t MotorStatus_msg;
extern const pb_msgdesc_t ArmData_msg;
extern const pb_msgdesc_t ArmCommand_msg;
extern const pb_msgdesc_t GripperData_msg;
extern const pb_msgdesc_t GripperCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Position_fields &Position_msg
#define MotorStatus_fields &MotorStatus_msg
#define ArmData_fields &ArmData_msg
#define ArmCommand_fields &ArmCommand_msg
#define GripperData_fields &GripperData_msg
#define GripperCommand_fields &GripperCommand_msg

/* Maximum encoded size of messages (where known) */
#define ArmCommand_size                          19
#define ArmData_size                             112
#define GripperCommand_size                      19
#define GripperData_size                         42
#define MotorStatus_size                         12
#define Position_size                            33

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
