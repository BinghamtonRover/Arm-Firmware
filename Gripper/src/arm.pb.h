/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ARM_PB_H_INCLUDED
#define PB_ARM_PB_H_INCLUDED
#include "utils/pb.h"
#include "version.pb.h"
#include "utils.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _MotorDirection {
    MotorDirection_MOTOR_DIRECTION_UNDEFINED = 0,
    MotorDirection_UP = 1,
    MotorDirection_DOWN = 2,
    MotorDirection_LEFT = 3,
    MotorDirection_RIGHT = 4,
    MotorDirection_CLOCKWISE = 5,
    MotorDirection_COUNTER_CLOCKWISE = 6,
    MotorDirection_OPENING = 7,
    MotorDirection_CLOSING = 8,
    MotorDirection_NOT_MOVING = 9
} MotorDirection;

/* Struct definitions */
typedef struct _Coordinates {
    float x;
    float y;
    float z;
} Coordinates;

typedef struct _MotorData {
    BoolState is_moving;
    BoolState is_limit_switch_pressed;
    MotorDirection direction;
    int32_t current_step;
    int32_t target_step;
    float angle;
} MotorData;

typedef struct _MotorCommand {
    /* Debug control: Move by individual steps */
    int32_t move_steps;
    /* Precise control: Move by radians */
    float move_radians;
} MotorCommand;

typedef struct _ArmData {
    bool has_currentPosition;
    Coordinates currentPosition;
    bool has_targetPosition;
    Coordinates targetPosition;
    bool has_base;
    MotorData base;
    bool has_shoulder;
    MotorData shoulder;
    bool has_elbow;
    MotorData elbow;
    bool has_version;
    Version version;
} ArmData;

typedef struct _ArmCommand {
    /* General commands */
    bool stop;
    bool calibrate;
    /* Move individual motors */
    bool has_swivel;
    MotorCommand swivel;
    bool has_shoulder;
    MotorCommand shoulder;
    bool has_elbow;
    MotorCommand elbow;
    /* Needed for IK: If the wrist-lift moves, we need to re-calculate IK to keep the end-effector
 stationary. See /Arm/src/ik/README.md in the Arm-Firmware repository. */
    bool has_gripper_lift;
    MotorCommand gripper_lift;
    float ik_x;
    float ik_y;
    float ik_z;
    /* Custom actions */
    bool jab;
    bool has_version;
    Version version;
} ArmCommand;

typedef struct _GripperData {
    bool has_lift;
    MotorData lift;
    bool has_rotate;
    MotorData rotate;
    bool has_pinch;
    MotorData pinch;
    bool has_version;
    Version version;
    int32_t servoAngle;
    BoolState laserState;
} GripperData;

typedef struct _GripperCommand {
    /* General commands */
    bool stop;
    bool calibrate;
    /* Move individual motors */
    bool has_lift;
    MotorCommand lift;
    bool has_rotate;
    MotorCommand rotate;
    bool has_pinch;
    MotorCommand pinch;
    /* Custom actions */
    bool open;
    bool close;
    bool spin;
    bool has_version;
    Version version;
    int32_t servoAngle;
    BoolState laserState;
} GripperCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _MotorDirection_MIN MotorDirection_MOTOR_DIRECTION_UNDEFINED
#define _MotorDirection_MAX MotorDirection_NOT_MOVING
#define _MotorDirection_ARRAYSIZE ((MotorDirection)(MotorDirection_NOT_MOVING+1))


#define MotorData_is_moving_ENUMTYPE BoolState
#define MotorData_is_limit_switch_pressed_ENUMTYPE BoolState
#define MotorData_direction_ENUMTYPE MotorDirection




#define GripperData_laserState_ENUMTYPE BoolState

#define GripperCommand_laserState_ENUMTYPE BoolState


/* Initializer values for message structs */
#define Coordinates_init_default                 {0, 0, 0}
#define MotorData_init_default                   {_BoolState_MIN, _BoolState_MIN, _MotorDirection_MIN, 0, 0, 0}
#define MotorCommand_init_default                {0, 0}
#define ArmData_init_default                     {false, Coordinates_init_default, false, Coordinates_init_default, false, MotorData_init_default, false, MotorData_init_default, false, MotorData_init_default, false, Version_init_default}
#define ArmCommand_init_default                  {0, 0, false, MotorCommand_init_default, false, MotorCommand_init_default, false, MotorCommand_init_default, false, MotorCommand_init_default, 0, 0, 0, 0, false, Version_init_default}
#define GripperData_init_default                 {false, MotorData_init_default, false, MotorData_init_default, false, MotorData_init_default, false, Version_init_default, 0, _BoolState_MIN}
#define GripperCommand_init_default              {0, 0, false, MotorCommand_init_default, false, MotorCommand_init_default, false, MotorCommand_init_default, 0, 0, 0, false, Version_init_default, 0, _BoolState_MIN}
#define Coordinates_init_zero                    {0, 0, 0}
#define MotorData_init_zero                      {_BoolState_MIN, _BoolState_MIN, _MotorDirection_MIN, 0, 0, 0}
#define MotorCommand_init_zero                   {0, 0}
#define ArmData_init_zero                        {false, Coordinates_init_zero, false, Coordinates_init_zero, false, MotorData_init_zero, false, MotorData_init_zero, false, MotorData_init_zero, false, Version_init_zero}
#define ArmCommand_init_zero                     {0, 0, false, MotorCommand_init_zero, false, MotorCommand_init_zero, false, MotorCommand_init_zero, false, MotorCommand_init_zero, 0, 0, 0, 0, false, Version_init_zero}
#define GripperData_init_zero                    {false, MotorData_init_zero, false, MotorData_init_zero, false, MotorData_init_zero, false, Version_init_zero, 0, _BoolState_MIN}
#define GripperCommand_init_zero                 {0, 0, false, MotorCommand_init_zero, false, MotorCommand_init_zero, false, MotorCommand_init_zero, 0, 0, 0, false, Version_init_zero, 0, _BoolState_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define Coordinates_x_tag                        1
#define Coordinates_y_tag                        2
#define Coordinates_z_tag                        3
#define MotorData_is_moving_tag                  1
#define MotorData_is_limit_switch_pressed_tag    2
#define MotorData_direction_tag                  3
#define MotorData_current_step_tag               4
#define MotorData_target_step_tag                5
#define MotorData_angle_tag                      6
#define MotorCommand_move_steps_tag              1
#define MotorCommand_move_radians_tag            2
#define ArmData_currentPosition_tag              1
#define ArmData_targetPosition_tag               2
#define ArmData_base_tag                         3
#define ArmData_shoulder_tag                     4
#define ArmData_elbow_tag                        5
#define ArmData_version_tag                      6
#define ArmCommand_stop_tag                      1
#define ArmCommand_calibrate_tag                 2
#define ArmCommand_swivel_tag                    3
#define ArmCommand_shoulder_tag                  4
#define ArmCommand_elbow_tag                     5
#define ArmCommand_gripper_lift_tag              6
#define ArmCommand_ik_x_tag                      7
#define ArmCommand_ik_y_tag                      8
#define ArmCommand_ik_z_tag                      9
#define ArmCommand_jab_tag                       10
#define ArmCommand_version_tag                   11
#define GripperData_lift_tag                     1
#define GripperData_rotate_tag                   2
#define GripperData_pinch_tag                    3
#define GripperData_version_tag                  4
#define GripperData_servoAngle_tag               5
#define GripperData_laserState_tag               6
#define GripperCommand_stop_tag                  1
#define GripperCommand_calibrate_tag             2
#define GripperCommand_lift_tag                  3
#define GripperCommand_rotate_tag                4
#define GripperCommand_pinch_tag                 5
#define GripperCommand_open_tag                  6
#define GripperCommand_close_tag                 7
#define GripperCommand_spin_tag                  8
#define GripperCommand_version_tag               9
#define GripperCommand_servoAngle_tag            10
#define GripperCommand_laserState_tag            11

/* Struct field encoding specification for nanopb */
#define Coordinates_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define Coordinates_CALLBACK NULL
#define Coordinates_DEFAULT NULL

#define MotorData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    is_moving,         1) \
X(a, STATIC,   SINGULAR, UENUM,    is_limit_switch_pressed,   2) \
X(a, STATIC,   SINGULAR, UENUM,    direction,         3) \
X(a, STATIC,   SINGULAR, INT32,    current_step,      4) \
X(a, STATIC,   SINGULAR, INT32,    target_step,       5) \
X(a, STATIC,   SINGULAR, FLOAT,    angle,             6)
#define MotorData_CALLBACK NULL
#define MotorData_DEFAULT NULL

#define MotorCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    move_steps,        1) \
X(a, STATIC,   SINGULAR, FLOAT,    move_radians,      2)
#define MotorCommand_CALLBACK NULL
#define MotorCommand_DEFAULT NULL

#define ArmData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  currentPosition,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  targetPosition,    2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  base,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  shoulder,          4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  elbow,             5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  version,           6)
#define ArmData_CALLBACK NULL
#define ArmData_DEFAULT NULL
#define ArmData_currentPosition_MSGTYPE Coordinates
#define ArmData_targetPosition_MSGTYPE Coordinates
#define ArmData_base_MSGTYPE MotorData
#define ArmData_shoulder_MSGTYPE MotorData
#define ArmData_elbow_MSGTYPE MotorData
#define ArmData_version_MSGTYPE Version

#define ArmCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     stop,              1) \
X(a, STATIC,   SINGULAR, BOOL,     calibrate,         2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  swivel,            3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  shoulder,          4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  elbow,             5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gripper_lift,      6) \
X(a, STATIC,   SINGULAR, FLOAT,    ik_x,              7) \
X(a, STATIC,   SINGULAR, FLOAT,    ik_y,              8) \
X(a, STATIC,   SINGULAR, FLOAT,    ik_z,              9) \
X(a, STATIC,   SINGULAR, BOOL,     jab,              10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  version,          11)
#define ArmCommand_CALLBACK NULL
#define ArmCommand_DEFAULT NULL
#define ArmCommand_swivel_MSGTYPE MotorCommand
#define ArmCommand_shoulder_MSGTYPE MotorCommand
#define ArmCommand_elbow_MSGTYPE MotorCommand
#define ArmCommand_gripper_lift_MSGTYPE MotorCommand
#define ArmCommand_version_MSGTYPE Version

#define GripperData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  lift,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rotate,            2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pinch,             3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  version,           4) \
X(a, STATIC,   SINGULAR, INT32,    servoAngle,        5) \
X(a, STATIC,   SINGULAR, UENUM,    laserState,        6)
#define GripperData_CALLBACK NULL
#define GripperData_DEFAULT NULL
#define GripperData_lift_MSGTYPE MotorData
#define GripperData_rotate_MSGTYPE MotorData
#define GripperData_pinch_MSGTYPE MotorData
#define GripperData_version_MSGTYPE Version

#define GripperCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     stop,              1) \
X(a, STATIC,   SINGULAR, BOOL,     calibrate,         2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  lift,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rotate,            4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pinch,             5) \
X(a, STATIC,   SINGULAR, BOOL,     open,              6) \
X(a, STATIC,   SINGULAR, BOOL,     close,             7) \
X(a, STATIC,   SINGULAR, BOOL,     spin,              8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  version,           9) \
X(a, STATIC,   SINGULAR, INT32,    servoAngle,       10) \
X(a, STATIC,   SINGULAR, UENUM,    laserState,       11)
#define GripperCommand_CALLBACK NULL
#define GripperCommand_DEFAULT NULL
#define GripperCommand_lift_MSGTYPE MotorCommand
#define GripperCommand_rotate_MSGTYPE MotorCommand
#define GripperCommand_pinch_MSGTYPE MotorCommand
#define GripperCommand_version_MSGTYPE Version

extern const pb_msgdesc_t Coordinates_msg;
extern const pb_msgdesc_t MotorData_msg;
extern const pb_msgdesc_t MotorCommand_msg;
extern const pb_msgdesc_t ArmData_msg;
extern const pb_msgdesc_t ArmCommand_msg;
extern const pb_msgdesc_t GripperData_msg;
extern const pb_msgdesc_t GripperCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Coordinates_fields &Coordinates_msg
#define MotorData_fields &MotorData_msg
#define MotorCommand_fields &MotorCommand_msg
#define ArmData_fields &ArmData_msg
#define ArmCommand_fields &ArmCommand_msg
#define GripperData_fields &GripperData_msg
#define GripperCommand_fields &GripperCommand_msg

/* Maximum encoded size of messages (where known) */
#define ARM_PB_H_MAX_SIZE                        ArmData_size
#define ArmCommand_size                          117
#define ArmData_size                             163
#define Coordinates_size                         15
#define GripperCommand_size                      101
#define GripperData_size                         142
#define MotorCommand_size                        16
#define MotorData_size                           33

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
